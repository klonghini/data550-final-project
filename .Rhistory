intercept <- -59.45505
coef_x1 <- 45.73143
coef_x2 <- 45.51044
# Create the plot
plot(admission$exam1_rescale, admission$exam2_rescale,
col = ifelse(admission$admission == 1, "blue", "red"),
pch = 19, xlab = "Exam 1 Score", ylab = "Exam 2 Score",
main = "Scores on Exam 1 vs Exam 2")
# Adding the decision boundary using curve()
curve(
(intercept + coef_x1 * x) / -coef_x2,
from = min(admission$exam1_rescale),
to = max(admission$exam1_rescale),
add = TRUE, col = "green", lwd = 2
)
equation_text <- paste("Decision Boundary: x2 = (", intercept, " + ", coef_x1, " * x1) / ", -coef_x2)
text(x = 0, y = 2, labels = equation_text, col = "green", cex = 1.2)
yhat = inv.logit(current_theta0 + current_theta1*x1 + current_theta2*x2)
db = inv.logit(current_theta0 + current_theta1*x1 + current_theta2*x2)
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_line(data = db)
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(db)
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green")
db = function(current_theta0, current_theta1, current_theta2, x1, x2){
db = inv.logit(current_theta0 + current_theta1*x1 + current_theta2*x2)
}
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green")
db = function(current_theta0, current_theta1, current_theta2, x1, x2){
inv.logit(current_theta0 + current_theta1*x1 + current_theta2*x2)
}
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green")
db <- function(x) {
# Parameters from logistic regression model
current_theta0 <- -59.45505
current_theta1 <- 45.73143
current_theta2 <- 45.51044
# Compute the decision boundary (exam2_rescale) as a function of exam1_rescale (x)
return((current_theta0 + current_theta1 * x) / -current_theta2)
}
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green")
require(boot)
## gradient descent ##
# cost function for a given y and hypothesis value #
cost = function(y,yhat) {
if(y==1) cost = -log(yhat)
if(y==0) cost = -log(1-yhat)
cost
}
#total cost#
J = function(theta0, theta1, theta2, m, x1, x2, y){
## inv.logit is the sigmoid function in the "boot" package ##
yhat = inv.logit(theta0 + theta1*x1 + theta2*x2)
sum_cost = (1/m)*sum(mapply(FUN=cost,y,yhat))
sum_cost
}
## define functions to compute the partial derivative terms
dJ0 = function(theta0, theta1, theta2, m, x1, x2, y){
yhat= inv.logit(theta0 + theta1*x1 + theta2*x2)
(1/m)*sum((yhat-y)*1)
}
dJ1 = function(theta0, theta1, theta2, m, x1, x2, y){
yhat= inv.logit(theta0 + theta1*x1 + theta2*x2)
(1/m)*sum((yhat-y)*x1)
}
dJ2 = function(theta0, theta1, theta2, m, x1, x2, y){
yhat= inv.logit(theta0 + theta1*x1 + theta2*x2)
(1/m)*sum((yhat-y)*x2)
}
## perform gradient descent
convg_threshold = 0.0001
alpha = 0.01
#re-scale x1 and x2
admission <- admission |>
mutate(
exam1_rescale = exam1 / max(exam1),
exam2_rescale = exam2 / max(exam2)
)
initial_theta0 = -120
initial_theta1 = 1
initial_theta2 = 1
x1 <- admission$exam1_rescale
x2 <- admission$exam2_rescale
y = admission$admission
m <- nrow(admission)
initial_J = J(initial_theta0, initial_theta1, initial_theta2, m, x1, x2, y)
initial_J
current_theta0 = initial_theta0
current_theta1 = initial_theta1
current_theta2 = initial_theta2
current_J = initial_J
theta0_values = c(current_theta0) # a vector to store updated theta0 values during iterations
theta1_values = c(current_theta1) # a vector to store updated theta1 values during iterations
theta2_values = c(current_theta2) # a vector to store updated theta2 values during iterations
J_values = c(current_J) # a vector to store cost function values during iterations
delta_J = 999 # an arbitrary value to start the while loop
while (delta_J>convg_threshold) {
new_theta0 = current_theta0 - alpha*dJ0(current_theta0, current_theta1, current_theta2, m, x1, x2, y)
new_theta1 = current_theta1 - alpha*dJ1(current_theta0, current_theta1, current_theta2, m, x1, x2, y)
new_theta2 = current_theta2 - alpha*dJ2(current_theta0, current_theta1, current_theta2, m, x1, x2, y)
new_J = J(new_theta0, new_theta1, new_theta2, m, x1, x2, y)
theta0_values = c(theta0_values, new_theta0)
theta1_values = c(theta1_values, new_theta1)
theta2_values = c(theta2_values, new_theta2)
J_values = c(J_values, new_J)
# absolute difference between new cost function and current cost function value
delta_J = abs(new_J - current_J)
## update current theta0, theta1, theta2, and J values
current_J = new_J
current_theta0 = new_theta0
current_theta1 = new_theta1
current_theta2 = new_theta2
}
library(ggplot2)
db <- function(x) {
# Parameters from logistic regression model
current_theta0
current_theta1
current_theta2
# Compute the decision boundary (exam2_rescale) as a function of exam1_rescale (x)
return((current_theta0 + current_theta1 * x) / -current_theta2)
}
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green")
library(ggplot2)
db <- function(x) {
# Parameters from logistic regression model
current_theta0
current_theta1
current_theta2
# Compute the decision boundary (exam2_rescale) as a function of exam1_rescale (x)
return((current_theta0 + current_theta1 * x) / -current_theta2)
}
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green")
exam1_68 = 68/max(admission$exam1)
exam2_75 = 75/max(admission$exam2)
exam1_68 = 68/max(admission$exam1)
exam2_75 = 75/max(admission$exam2)
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green") +
geom_point(aes(x = exam1_68, y = exam2_75), color = "red", size = 3, shape = 19) +
annotate("text", x = 0.68, y = 0.75, label = "Student Scores", color = "red", size = 5, hjust = -0.1)
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green") +
geom_point(aes(x = exam1_68, y = exam2_75), color = "red", size = 3, shape = 19) +
annotate("text", x = 0.68, y = 0.75, label = "Student's Exam Scores", color = "red", size = 5, hjust = -0.1)
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green") +
geom_point(aes(x = exam1_68, y = exam2_75), color = "red", size = 3, shape = 19) +
annotate("text", x = 0.68, y = 0.75, label = "Student's Exam Scores", color = "red", size = 5)
ggplot(admission) +
aes(x = exam1_rescale, y = exam2_rescale, colour = admission) +
geom_point(size = 1.75) +
scale_color_viridis_c(option = "viridis",
direction = 1) +
labs(x = "Exam 1 Score", y = "Exam 2 Score", title = "Scores on Exam 2 vs Exam 1",
color = "Admission") +
theme_bw() +
geom_function(fun = db, color = "green") +
geom_point(aes(x = exam1_68, y = exam2_75), color = "red", size = 3, shape = 19) +
annotate("text", x = 0.68, y = 0.75, label = "Student's Exam Scores", color = "red", size = 5, hjust = -0.1)
x1_student = 68
x2_student = 75
student_prediction = inv.logit(current_theta0 + current_theta1*x1_student + current_theta2*x2_student)
student_prediction
setwd("~/OneDrive - Emory/NEW Emory University/Emory University/DATA 550/final-project")
library(here)
library(janitor)
here::i_am("code/00_clean_data.R")
absolute_path_to_data <- here::here("data/Breast_Cancer.csv")
breast_cancer <- read.csv(absolute_path_to_data, header=TRUE) |>
clean_names()
View(breast_cancer)
# Check for missing data
table(breast_cancer$status, useNA="ifany")
table(breast_cancer$grade, useNA="ifany")
table(breast_cancer$a_stage, useNA="ifany")
table(breast_cancer$estrogen_status, useNA="ifany")
table(breast_cancer$progesterone_status, useNA="ifany")
fivenum(breast_cancer$age)
fivenum(breast_cancer$tumor_size)
# Save cleaned data to the data folder
saveRDS(
breast_cancer,
file = here::here("data", "breast_cancer.rds")
)
library(labelled)
library(gtsummary)
# Load in data
here::i_am("code/01_make_table1.R")
breast_cancer <- readRDS(
file = here::here("data/breast_cancer.rds")
)
breast_cancer$status_numeric <- ifelse(breast_cancer$status == "Alive", 0, 1)
breast_cancer <- breast_cancer |>
mutate(grade = fct_relevel(as.factor(grade), c("1", "2", "3", " anaplastic; Grade IV"))) |>
mutate(a_stage = fct_relevel(as.factor(a_stage), c("Regional", "Distant")))
library(forcats)
breast_cancer <- breast_cancer |>
mutate(grade = fct_relevel(as.factor(grade), c("1", "2", "3", " anaplastic; Grade IV"))) |>
mutate(a_stage = fct_relevel(as.factor(a_stage), c("Regional", "Distant")))
breast_cancer$grade_revised <- gsub(" anaplastic; Grade IV", "4", breast_cancer$grade)
var_label(breast_cancer) <- list(
age = "Age (years)",
a_stage = "Cancer Stage",
grade_revised = "Cancer Grade",
estrogen_status = "Estrogen Status",
progesterone_status = "Progesterone Status",
status = "Survival Status",
tumor_size = "Tumor Size (mm)"
)
breast_cancer |>
select("status", "grade_revised", "a_stage", "estrogen_status", "progesterone_status", "tumor_size", "age") |>
tbl_summary(by = status) |>
modify_spanning_header(c("stat_1", "stat_2") ~ "**Survival Status**") |>
modify_caption("**Breast Cancer Patient Characteristics**") |>
bold_labels() |>
add_overall() |>
add_p()
table1 <- breast_cancer |>
select("status", "grade_revised", "a_stage", "estrogen_status", "progesterone_status", "tumor_size", "age") |>
tbl_summary(by = status) |>
modify_spanning_header(c("stat_1", "stat_2") ~ "**Survival Status**") |>
modify_caption("**Breast Cancer Patient Characteristics**") |>
bold_labels() |>
add_overall() |>
add_p()
saveRDS(
table1,
file = here::here("output", "table1.rds")
)
# Load in data
here::i_am("code/04_make_regression_primary_model.R")
breast_cancer <- readRDS(
file = here::here("data/breast_cancer.rds")
)
binary_mod <- glm(
status_numeric ~ grade_revised + a_stage + estrogen_status + progesterone_status + tumor_size + age,
data = breast_cancer,
family = binomial()
)
breast_cancer$status_numeric <- ifelse(breast_cancer$status == "Alive", 0, 1)
binary_mod <- glm(
status_numeric ~ grade_revised + a_stage + estrogen_status + progesterone_status + tumor_size + age,
data = breast_cancer,
family = binomial()
)
breast_cancer$grade_revised <- gsub(" anaplastic; Grade IV", "4", breast_cancer$grade)
binary_mod <- glm(
status_numeric ~ grade_revised + a_stage + estrogen_status + progesterone_status + tumor_size + age,
data = breast_cancer,
family = binomial()
)
tbl_regression(binary_mod, exponentiate = TRUE) |>
modify_caption("**Logistic Regression for Breast Cancer Survival**") |>
bold_labels() |>
add_global_p()
var_label(breast_cancer) <- list(
age = "Age (years)",
a_stage = "Cancer Stage",
grade_revised = "Cancer Grade",
estrogen_status = "Estrogen Status",
progesterone_status = "Progesterone Status",
status = "Survival Status",
tumor_size = "Tumor Size (mm)"
)
# Load in data
here::i_am("code/04_make_regression_primary_model.R")
breast_cancer <- readRDS(
file = here::here("data/breast_cancer.rds")
)
breast_cancer$status_numeric <- ifelse(breast_cancer$status == "Alive", 0, 1)
breast_cancer <- breast_cancer |>
mutate(grade = fct_relevel(as.factor(grade), c("1", "2", "3", " anaplastic; Grade IV"))) |>
mutate(a_stage = fct_relevel(as.factor(a_stage), c("Regional", "Distant")))
breast_cancer$grade_revised <- gsub(" anaplastic; Grade IV", "4", breast_cancer$grade)
var_label(breast_cancer) <- list(
age = "Age (years)",
a_stage = "Cancer Stage",
grade_revised = "Cancer Grade",
estrogen_status = "Estrogen Status",
progesterone_status = "Progesterone Status",
status = "Survival Status",
tumor_size = "Tumor Size (mm)"
)
binary_mod <- glm(
status_numeric ~ grade_revised + a_stage + estrogen_status + progesterone_status + tumor_size + age,
data = breast_cancer,
family = binomial()
)
tbl_regression(binary_mod, exponentiate = TRUE) |>
modify_caption("**Logistic Regression for Breast Cancer Survival**") |>
bold_labels() |>
add_global_p()
ggsave(
here::here("output/barplot1.png"),
plot = barplot1,
device = "png"
)
library(ggplot2)
ggsave(
here::here("output/barplot1.png"),
plot = barplot1,
device = "png"
)
# Load in data
here::i_am("code/02_make_barplot1.R")
breast_cancer <- readRDS(
file = here::here("data/breast_cancer.rds")
)
breast_cancer$status_numeric <- ifelse(breast_cancer$status == "Alive", 0, 1)
breast_cancer <- breast_cancer |>
mutate(grade = fct_relevel(as.factor(grade), c("1", "2", "3", " anaplastic; Grade IV"))) |>
mutate(a_stage = fct_relevel(as.factor(a_stage), c("Regional", "Distant")))
breast_cancer$grade_revised <- gsub(" anaplastic; Grade IV", "4", breast_cancer$grade)
var_label(breast_cancer) <- list(
age = "Age (years)",
a_stage = "Cancer Stage",
grade_revised = "Cancer Grade",
estrogen_status = "Estrogen Status",
progesterone_status = "Progesterone Status",
status = "Survival Status",
tumor_size = "Tumor Size (mm)"
)
barplot1 <- ggplot(breast_cancer) +
aes(x = grade_revised, fill = status) +
geom_bar(position = "fill") +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c(Alive = "#1EB2FF", Dead = "#FF5B53")) +
labs(
x = "Cancer Grade",
y = "Percent of Patients",
title = "Survival Status by Breast Cancer Grade",
subtitle = expression(italic("As a percentage of patients within each cancer grade")),
fill = "Survival Status") +
theme_bw()
ggsave(
here::here("output/barplot1.png"),
plot = barplot1,
device = "png"
)
library(ggplot2)
library(forcats)
library(labelled)
library(gtsummary)
library(dplyr)
# Load in data
here::i_am("code/02_make_barplot1.R")
breast_cancer <- readRDS(
file = here::here("data/breast_cancer.rds")
)
breast_cancer$status_numeric <- ifelse(breast_cancer$status == "Alive", 0, 1)
breast_cancer <- breast_cancer |>
mutate(grade = fct_relevel(as.factor(grade), c("1", "2", "3", " anaplastic; Grade IV"))) |>
mutate(a_stage = fct_relevel(as.factor(a_stage), c("Regional", "Distant")))
breast_cancer$grade_revised <- gsub(" anaplastic; Grade IV", "4", breast_cancer$grade)
var_label(breast_cancer) <- list(
age = "Age (years)",
a_stage = "Cancer Stage",
grade_revised = "Cancer Grade",
estrogen_status = "Estrogen Status",
progesterone_status = "Progesterone Status",
status = "Survival Status",
tumor_size = "Tumor Size (mm)"
)
barplot1 <- ggplot(breast_cancer) +
aes(x = grade_revised, fill = status) +
geom_bar(position = "fill") +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = c(Alive = "#1EB2FF", Dead = "#FF5B53")) +
labs(
x = "Cancer Grade",
y = "Percent of Patients",
title = "Survival Status by Breast Cancer Grade",
subtitle = expression(italic("As a percentage of patients within each cancer grade")),
fill = "Survival Status") +
theme_bw()
ggsave(
here::here("output/barplot1.png"),
plot = barplot1,
device = "png"
)
library(ggplot2)
library(forcats)
library(labelled)
library(gtsummary)
library(dplyr)
# Load in data
here::i_am("code/03_make_barplot2.R")
breast_cancer <- readRDS(
file = here::here("data/breast_cancer.rds")
)
breast_cancer$status_numeric <- ifelse(breast_cancer$status == "Alive", 0, 1)
breast_cancer <- breast_cancer |>
mutate(grade = fct_relevel(as.factor(grade), c("1", "2", "3", " anaplastic; Grade IV"))) |>
mutate(a_stage = fct_relevel(as.factor(a_stage), c("Regional", "Distant")))
breast_cancer$grade_revised <- gsub(" anaplastic; Grade IV", "4", breast_cancer$grade)
var_label(breast_cancer) <- list(
age = "Age (years)",
a_stage = "Cancer Stage",
grade_revised = "Cancer Grade",
estrogen_status = "Estrogen Status",
progesterone_status = "Progesterone Status",
status = "Survival Status",
tumor_size = "Tumor Size (mm)"
)
barplot2 <- ggplot(breast_cancer) +
aes(x = status, fill = grade_revised) +
geom_bar(position = "fill") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d(option = "plasma",
direction = 1) +
labs(
x = "Survival Status",
y = "Percent of Patients",
title = "Breast Cancer Grade by Survival Status",
subtitle = expression(italic("As a percentage of patients within each survival status")),
fill = "Cancer Grade") +
theme_bw()
ggsave(
here::here("output/barplot2.png"),
plot = barplot2,
device = "png"
)
source("renv/activate.R")
renv::restore()
renv::activate()
renv::status()
renv::restore()
getwd()
